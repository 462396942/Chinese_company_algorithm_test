#coding=UTF-8
'''
Alice,Bob玩游戏，n个灯泡，1表示亮，0表示暗，将其任意排列，定义如下操作：
轮到每个人时，该人可以随意选择从一个亮着的灯泡开始，将后面的灯泡(包括第k个)的亮度翻转
假定从Alice开始，每个人轮流的进行以上操作，直到所有灯泡都变成暗后，游戏结束，并且接下来的那个人胜出
假定每个人都足够聪明的情况下：
输入：第一行为灯泡的个数n，第二行为n个灯泡的初始状态
输出：谁赢得游戏，输出谁的名字
例：
输入：
5
1 1 1 0 0
输出：
Alice
第一次Alice可以变为00011
第二次Bob只能是00000(Bob已经输了)或者00010
第三次Alice只能是00001
第四次Bob只能是00000(Bob还是输)
所以Alice赢

思路：假设初始二进制为11100
每次变换，即将1后面的数翻转，二进制所表示的值一定是在减少，且奇偶性一定会发生变换，因为二进制的最低位
一定会翻转。
所以开始是偶数，最后到自己手上的数一定是0(赢了)，开始是奇数的，最后到自己手上的数一定是1(别人赢)
所以只需判断二进制数是偶数还是奇数，即判断二进制数最后一位是0还是1，就可判断谁会赢
'''
n = 5
a = [1,1,1,0,1]
if a[-1] % 2 == 0:
    print("Alice")
else:
    print("Bob") 